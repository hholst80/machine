#!/usr/bin/env python3

from __future__ import print_function, with_statement
import argparse
import datetime
import fnmatch
import json
import os
import socket
import subprocess
import sys
import time
import yaml
import _thread
import boto3

__version__ = '0.324.0'

class Machine(object):
    def __init__(self, *, key_name, security_group_id, ssh_config_path,
                 ssh_identity_file, image_user_mapping,
                 spot_price, availability_zone,
                 instance_type_image_mappings, quiet=False, **kwargs):
        self._quiet = quiet
        self._sess = boto3.session.Session()
        # self._ec2 = self._sess.client('ec2')
        self._ec2 = boto3.resource("ec2")
        self._key_name = key_name
        self._security_group_id = security_group_id
        self._ssh_config_path = ssh_config_path
        self._ssh_identity_file = ssh_identity_file
        self._image_user_mapping = image_user_mapping
        self._instance_type_image_mappings = instance_type_image_mappings
        self._spot_price = spot_price
        self._availability_zone = availability_zone

    def version(self, **kwargs):
        print('machine {}'.format(__version__))
        print()
        print('https://github.com/hholst80/machine')

    def ls(self, **kwargs):
        instances = self._get_all_instances()
        if not self._quiet:
            fmtstr = "{:20}{:20}{:20}{:20}\n{:20}{:20}{:20}"
        else:
            fmtstr = "{:20}"*6

        if not self._quiet:
            header_fields = ["Name", "Instance Id", "Instance Type", "Instance State",
                             "Ip", "User", "Services"]
            print(fmtstr.format(*header_fields))
            print('-'*80)

        def collect_output(output, instance):
            id = instance.id
            state = "{Name} ({Code})".format(**instance.state)
            assert id is not None
            name = self._get_name(instance) or ""
            type = instance.instance_type
            user = self._get_user(instance.image_id) or ""
            ip = instance.public_ip_address or ""
            services = " ".join(self._get_services(instance)) or ""
            fields = (name, id, type, state, ip, user, services)
            line = fmtstr.format(*fields)
            output[id] = line

        output = {}
        num_instances = 0
        for instance in instances:
            _thread.start_new_thread(collect_output, (output, instance))
            num_instances += 1

        while len(output) < num_instances:
            time.sleep(0.1)

        for instance in instances:
            print(output[instance.id])

    def type(self, *, instance_id, **kwargs):
        try:
            instance = self._resolve_instance(instance_id)
            print(instance.instance_type)
            return instance.instance_type
        except:
            print('Host does not exist: "{}"'.format(instance_id), file=sys.stderr)

    def start(self, *, ids, **kwargs):
        for _id in ids:
            try:
                instance = self._resolve_instance(_id)
                result = instance.start()
                if result['ResponseMetadata']['HTTPStatusCode'] != 200:
                    self._display_json(result, file=sys.stderr)
                else:
                    print('starting {}'.format(instance.id))
            except Exception as e:
                print(str(e), file=sys.stderr)

    def stop(self, *, ids, **kwargs):
        for _id in ids:
            try:
                instance = self._resolve_instance(_id)
                result = instance.stop()
                if result['ResponseMetadata']['HTTPStatusCode'] != 200:
                    self._display_json(result, file=sys.stderr)
                else:
                    print('stopping {}'.format(instance.id))
            except Exception as e:
                print(str(e), file=sys.stderr)

    def rm(self, *, ids, **kwargs):
        for _id in ids:
            try:
                instance = self._resolve_instance(_id)
                if instance is None:
                    print("error: no such instance {}".format(_id),
                          file=sys.stderr)
                    continue
                result = instance.terminate()
                if result['ResponseMetadata']['HTTPStatusCode'] != 200:
                    self._display_json(result, file=sys.stderr)
                else:
                    print('terminating {}'.format(instance.id))
            except Exception as e:
                print(str(e), file=sys.stderr)

    def image_create(self, *, instance_id, name, description=None,
                     no_reboot=False, **kwargs):
        try:
            instance = self._resolve_instance(instance_id)
            kwargs = {'Name': name, 'NoReboot': no_reboot}
            if description is not None:
                kwargs.update({'Description': description})
            image = instance.create_image(**kwargs)
            print("created {} from {}".format(image.id, instance.id))
        except Exception as e:
            print(str(e), file=sys.stderr)

    def image_ls(self, **kwargs):
        images = self._ec2.images.filter(Owners=['self'])
        for image in images:
            print("{:20}{:20}{:20}".format(image.id, image.state, image.name))

    def image_rm(self, *, images, **kwargs):
        for _id in images:
            images = self._ec2.images.filter(Owners=['self'])
            for image in images:
                if image.id == _id or image.name == _id:
                    print("removing {} {}".format(image.id, image.name))
                    image.deregister()

    def ssh(self, host, *commands, **kwargs):
        self.export()
        args = ('ssh', '-F', self._ssh_config_path, host, '--') + commands
        subprocess.call(args)

    def scp(self, *, commands, quiet=False, verbose=False, recursive=False,
            **kwargs):
        self.export()
        cmd = ('scp', '-F', self._ssh_config_path)
        if quiet:
            cmd += ('-q',)
        if verbose:
            cmd += ('-v',)
        if recursive:
            cmd += ('-r',)
        cmd += ('--',) + tuple(commands)
        subprocess.call(cmd)

    def ip(self, *, private=False, **kwargs):
        if private:
            return self.private_ip(**kwargs)
        else:
            return self.public_ip(**kwargs)

    def public_ip(self, *, instance_id, quiet=False, **kwargs):
        try:
            instance = self._resolve_instance(instance_id)
            if not quiet:
                print(instance.public_ip_address)
            return instance.public_ip_address
        except Exception as e:
            print('Host does not exist: "{}"'.format(instance_id), file=sys.stderr)
            raise e

    def private_ip(self, *, instance_id, quiet=False, **kwargs):
        try:
            instance = self._resolve_instance(instance_id)
            if not quiet:
                print(instance.private_ip_address)
            return instance.private_ip_address
        except Exception as e:
            print('Host does not exist: "{}"'.format(instance_id), file=sys.stderr)
            raise e

    def create(self, *, spot=False, instance_type, image_id=None, **kwargs):
        if image_id is None:
            image_id = self._resolve_image_id(instance_type)

        m = self.create_spot if spot else self.create_ondemand
        m(instance_type=instance_type, image_id=image_id, **kwargs)

    def create_spot(self, *, instance_type, names, image_id, terminate=False, **kwargs):
        client = self._sess.client('ec2')
        names = self._filter_names(names)
        if len(names) == 0:
            return

        launch_specification = {
            'ImageId': image_id,
            'KeyName': self._key_name,
            'SecurityGroupIds': [self._security_group_id],
            'InstanceType': instance_type,
            'Placement': {'AvailabilityZone': self._availability_zone},
            'EbsOptimized': True,
        }

        kwargs = {
            'SpotPrice': str(self._spot_price),
            'InstanceCount': len(names),
            'LaunchSpecification': launch_specification,
        }

        response = client.request_spot_instances(**kwargs)
        sir_ids = [sir['SpotInstanceRequestId'] for sir in response['SpotInstanceRequests']]

        # Wait for 10 seconds and verify that we got our instances.

        max_tries = 10
        tries = 0
        failed = False
        # last_msg = None

        while True:
            time.sleep(1)
            response = client.describe_spot_instance_requests(SpotInstanceRequestIds=sir_ids)
            all_fulfilled = True
            for request in response['SpotInstanceRequests']:
                # msg = request['Status']['Message']
                # if msg != last_msg:
                #     print(msg)
                #     last_msg = msg
                if request['Status']['Code'] != 'fulfilled':
                    all_fulfilled = False
                    # print('cancelling {}'.format(sir))
                    # client.cancel_spot_instance_requests(SpotInstanceRequestIds=[sir])
            if all_fulfilled:
                break
            tries += 1
            if tries >= max_tries:
                failed = True
                break

        if failed:
            client.cancel_spot_instance_requests(SpotInstanceRequestIds=sir_ids)
            print("Error: Failed to create spot instances", file=sys.stderr)
            return

        for (name, request) in zip(names, response['SpotInstanceRequests']):
            instance = self._resolve_instance(request['InstanceId'])
            instance.create_tags(Tags=[{'Key': 'Name', 'Value': name}])
            print('{} {}'.format(instance.id, name))

    def create_ondemand(self, *, instance_type, names, image_id=None, terminate=False, **kwargs):
        names = self._filter_names(names)
        if len(names) == 0:
            return
        kwargs = {
            'ImageId': image_id,
            'KeyName': self._key_name,
            'SecurityGroupIds': [self._security_group_id],
            'InstanceType': instance_type,
            'EbsOptimized': True,
            'MinCount': len(names),
            'MaxCount': len(names),
            'Placement': {'AvailabilityZone': self._availability_zone},
        }
        if terminate:
            kwargs.update({'InstanceInitiatedShutdownBehavior':
                           'terminate'})
        instances = self._ec2.create_instances(**kwargs)
        for name, instance in zip(names, instances):
            instance.create_tags(Tags=[{'Key': 'Name', 'Value': name}])
            print('{} {}'.format(instance.id, name))

    def export(self, **kwargs):
        instances = self._ec2.instances.filter(Filters=[
            {"Name": "instance-state-code", "Values": ["16"]},
            {"Name": "key-name", "Values": [self._key_name]},
        ])

        with open(self._ssh_config_path, "w") as f:
            for instance in instances:
                id = instance.id
                name = self._get_name(instance) or ""
                user = self._get_user(instance.image_id)
                ip = instance.public_ip_address
                for host in [id, name] if name else [id]:
                    f.write("Host {}\n".format(host))
                    f.write("\tHostname {}\n".format(ip))
                    f.write("\tUser {}\n".format(user))
                    f.write("\tIdentityFile {}\n".format(self._ssh_identity_file))
                    f.write("\tStrictHostKeyChecking {}\n".format("no"))
                    f.write("\tUserKnownHostsFile {}\n".format("/dev/null"))
                    f.write("\tLogLevel {}\n".format("quiet"))

    def _get_services(self, instance, services={'ssh': 22}):
        ip = self.ip(instance_id=instance.id, quiet=True)
        ok_services = []
        if ip is not None:
            for service, port in services.items():
                try:
                    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    # TODO: We should do these calls in batch
                    s.settimeout(0.2)
                    s.connect((ip, port))
                    ok_services.append(service)
                except:
                    pass
        return ok_services

    def _get_checks(self, instance):
        args = ('aws', 'ec2', 'describe-instance-status',
                '--instance-ids', instance.id)
        out = subprocess.check_output(args).decode('utf-8')
        data = json.loads(out)
        if len(data['InstanceStatuses']) == 0:
            return None
        data = data['InstanceStatuses'][0]
        checks = {}
        key = data['InstanceStatus']['Status']
        checks[key] = checks.get(key, 0) + 1
        key = data['SystemStatus']['Status']
        checks[key] = checks.get(key, 0) + 1
        # if checks.get('initializing', 0) >= 1:
        #     return "Initializing"
        return '{}/2 checks passed'.format(checks.get('ok', 0))

    def _get_name(self, instance):
        tags = instance.tags
        if tags is None:
            return None
        for tag in tags:
            if tag['Key'] == 'Name':
                return tag['Value']
        return None

    def _resolve_image_id(self, instance_type):
        for mapping in self._instance_type_image_mappings:
            for pat, image in mapping.items():
                if fnmatch.fnmatch(instance_type, pat):
                    return image
        return None

    def _get_user(self, image_id, default='ec2-user'):
        return self._image_user_mapping.get(image_id, default)

    def _resolve_instance(self, instance_id):
        for instance in self._get_all_instances():
            if instance_id == instance.id:
                return instance
            try:
                for tag in instance.tags:
                    if tag['Key'] == 'Name':
                        if tag['Value'] == instance_id:
                            return instance
            except:
                continue
        return None

    def _get_all_instances(self):
        instances = self._ec2.instances.filter(Filters=[
            {"Name": "instance-state-code",
             "Values": ["0", "16", "32", "64", "80"]},
            {"Name": "key-name", "Values": [self._key_name]},
        ])
        return instances

    def _filter_names(self, names):
        all_instances = self._get_all_instances()
        all_names = [self._get_name(instance) for instance in all_instances]
        new_names = []
        for name in names:
            if name in all_names:
                print('name {} already exists. skipping.'.format(name), file=sys.stderr)
                continue
            new_names.append(name)
        return new_names
    @staticmethod
    def get_parser():
        parser = argparse.ArgumentParser()
        parser.add_argument('-q', '--quiet', action='store_true',
                            help='less verbose output')
        parser.add_argument('--key-name')
        parser.add_argument('--security-group-id')
        parser.add_argument('-F', '--ssh-config-path',
                            help='path to SSH config file')

        subparsers = parser.add_subparsers()

        subparser = subparsers.add_parser('version')
        subparser.set_defaults(command=Machine.version)

        subparser = subparsers.add_parser('ls')
        subparser.set_defaults(command=Machine.ls)

        subparser = subparsers.add_parser('create')
        subparser.add_argument('--instance-type', required=True)
        subparser.add_argument('names', type=str, nargs='+')
        subparser.add_argument('--image-id', type=str, default=None)
        subparser.add_argument('--terminate', action='store_true',
                               help='terminate on shutdown')
        subparser.add_argument('--spot', action='store_true')
        subparser.set_defaults(command=Machine.create)

        for cmd in ['start', 'stop', 'rm']:
            subparser = subparsers.add_parser(cmd)
            subparser.add_argument('ids', type=str, nargs='+')
            command = getattr(Machine, cmd)
            subparser.set_defaults(command=command)

        subparser = subparsers.add_parser('type')
        subparser.add_argument('instance_id')
        subparser.set_defaults(command=Machine.type)

        subparser = subparsers.add_parser('ip')
        subparser.add_argument('instance_id')
        subparser.add_argument('--private', action='store_true')
        subparser.set_defaults(command=Machine.ip)

        subparser = subparsers.add_parser('export')
        subparser.set_defaults(command=Machine.export)

        subparser = subparsers.add_parser('ssh')
        subparser.add_argument('host')
        subparser.add_argument('commands', type=str, nargs='*')
        subparser.set_defaults(command=Machine.ssh)

        subparser = subparsers.add_parser('scp')
        subparser.add_argument('-q', dest='quiet', action='store_true',
                               help='quiet mode')
        subparser.add_argument('-r', dest='recursive', action='store_true',
                               help='recursively copy entire directories')
        subparser.add_argument('-v', dest='verbose', action='store_true',
                               help='verbose mode')
        subparser.add_argument('-F', '--ssh-config-path', default='/tmp/ssh_config',
                               help='ssh_config path')
        subparser.add_argument('commands', type=str, nargs='*')
        subparser.set_defaults(command=Machine.scp)

        subparser = subparsers.add_parser('image-create')
        subparser.add_argument('instance_id')
        subparser.add_argument('name')
        subparser.add_argument('--description')
        subparser.set_defaults(command=Machine.image_create)

        subparser = subparsers.add_parser('image-ls')
        subparser.set_defaults(command=Machine.image_ls)

        subparser = subparsers.add_parser('image-rm')
        subparser.add_argument('images', nargs='*')
        subparser.set_defaults(command=Machine.image_rm)

        return parser

def main(argv):
    parser = Machine.get_parser()
    args = parser.parse_args(argv[1:])
    kwargs = {}

    # Config file placement, still an unsolved problem in 2017.

    machine_confs = [
        argv[0] + '.yml',
        os.path.join(os.environ.get('XDG_CONFIG_HOME',
                                    os.path.join(os.environ['HOME'],
                                                 '.config')), 'machine',
                     'machine.yml'),
        # 'machine.yaml',
    ]

    for machine_conf in machine_confs:
        if os.path.isfile(machine_conf):
            with open(machine_conf, 'r') as f:
                kwargs.update(yaml.load(f))

    # Command line options have higher priority than yaml configs.

    kwargs.update(dict(t for t in args._get_kwargs() if t[1] is not None))

    machine = Machine(**kwargs)

    if 'command' in args:
        args.command(machine, **kwargs)
    else:
        parser.print_usage()

if __name__ == '__main__':
    main(sys.argv)
